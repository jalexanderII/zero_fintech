syntax = "proto3";

package core;
option go_package = "github.com/jalexanderII/zero_fintech/gen/Go/core";

import "common/payment_task.proto";
import "core/payment_task.proto";
import "core/accounts.proto";
import "core/transactions.proto";
import "core/users.proto";

service Core {
  // GetPaymentPlan makes request to the Planning service by passing it a list
  // of PaymentTasks and expects to receive a list of PaymentPlans
  rpc GetPaymentPlan(GetPaymentPlanRequest) returns (common.PaymentPlanResponse);
  // UpdatePaymentPlan makes request to the Planning service by passing to update
  // its current Payment Plan with based on user specified MetaData
  rpc UpdatePaymentPlan(common.UpdatePaymentPlanPlanRequest) returns (common.PaymentPlanResponse);

  //  CRUD METHODS
  // Account
  rpc CreateAccount(CreateAccountRequest) returns (Account);
  rpc GetAccount(GetAccountRequest) returns (Account);
  rpc ListAccounts(ListAccountRequest) returns (ListAccountResponse);
  rpc UpdateAccount(UpdateAccountRequest) returns (Account);
  rpc DeleteAccount(DeleteAccountRequest) returns (DeleteAccountResponse);
  // Transaction
  rpc CreateTransaction(CreateTransactionRequest) returns (Transaction);
  rpc GetTransaction(GetTransactionRequest) returns (Transaction);
  rpc ListTransactions(ListTransactionRequest) returns (ListTransactionResponse);
  rpc UpdateTransaction(UpdateTransactionRequest) returns (Transaction);
  rpc DeleteTransaction(DeleteTransactionRequest) returns (DeleteTransactionResponse);
  //Payment Task
  rpc CreatePaymentTask(core.CreatePaymentTaskRequest) returns (common.PaymentTask);
  rpc CreateManyPaymentTask(core.CreateManyPaymentTaskRequest) returns (core.CreateManyPaymentTaskResponse);
  rpc GetPaymentTask(core.GetPaymentTaskRequest) returns (common.PaymentTask);
  rpc ListPaymentTasks(core.ListPaymentTaskRequest) returns (core.ListPaymentTaskResponse);
  rpc UpdatePaymentTask(core.UpdatePaymentTaskRequest) returns (common.PaymentTask);
  rpc DeletePaymentTask(core.DeletePaymentTaskRequest) returns (core.DeletePaymentTaskResponse);
  // Users
  rpc GetUser(GetUserRequest) returns (User);
  rpc ListUsers(ListUserRequest) returns (ListUserResponse);
  rpc UpdateUser(UpdateUserRequest) returns (User);
  rpc DeleteUser(DeleteUserRequest) returns (DeleteUserResponse);
}

message GetPaymentPlanRequest {
  repeated AccountInfo account_info = 1;
  string user_id = 2;
}

message AccountInfo {
  repeated string transaction_ids = 1;
  string account_id = 2;
  double amount = 3;
}
