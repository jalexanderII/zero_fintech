name: CI

on:
  pull_request:

jobs:
  check-black:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - id: file_changes
        uses: Ana06/get-changed-files@v1.2
      - name: check black
        run: ./scripts/black.sh
        env:
          CHANGED_FILES: ${{ steps.file_changes.outputs.added_modified }}

  prep-testbed:
    runs-on: ubuntu-latest
    needs: [check-black]
    steps:
      - uses: actions/checkout@v2
      - id: set-matrix
        run: |
          sudo apt-get install jq
          echo "::set-output name=matrix::$(bash scripts/get-all-test-paths.sh)"
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

  unit-test-python:
    needs: prep-testbed
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [ 3.8 ]
        test-path: ${{fromJson(needs.prep-testbed.outputs.matrix)}}
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Prepare enviroment
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
          pip install --no-cache-dir ".[test]"
      - name: Python Unit Test
        id: test
        run: |
          pytest --suppress-no-test-exit-code --cov=now --cov-report=xml \
            -v -s -m "not gpu" ${{ matrix.test-path }}
          echo "::set-output name=codecov_flag::now"
        timeout-minutes: 10
#      - name: Check codecov file
#        id: check_files
#        uses: andstor/file-existence-action@v1
#        with:
#          files: "coverage.xml"
#      - name: Upload coverage from test to Codecov
#        uses: codecov/codecov-action@v2
#        if: steps.check_files.outputs.files_exists == 'true' && ${{ matrix.python-version }} == '3.8'
#        with:
#          file: coverage.xml
#          flags: ${{ steps.test.outputs.codecov_flag }}
#          fail_ci_if_error: false
#  #          token: ${{ secrets.CODECOV_TOKEN }} # not required for public repos

  # just for blocking the merge until all parallel core-test are successful
  success-all-test:
    needs: unit-test-python
    if: always()
    runs-on: ubuntu-latest
    steps:
      - uses: technote-space/workflow-conclusion-action@v2
      - name: Check Failure
        if: env.WORKFLOW_CONCLUSION == 'failure'
        run: exit 1
      - name: Success
        if: ${{ success() }}
        run: echo "All Done"
