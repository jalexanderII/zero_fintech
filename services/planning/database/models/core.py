# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: core/accounts.proto, core/transactions.proto, core/users.proto, core/core.proto
# plugin: python-betterproto
from dataclasses import dataclass
from datetime import datetime
from typing import List, Optional

import betterproto
import grpclib

from . import common
from . import planning
from .google import protobuf


class PenaltyAPRPenaltyReason(betterproto.Enum):
    PENALTY_REASON_UNKNOWN = 0
    PENALTY_REASON_LATE_PAYMENT = 1


@dataclass
class Account(betterproto.Message):
    """
    Account balances we be calculated using the â€œaverage daily balance
    (including new Purchases)" method.
    """

    account_id: str = betterproto.string_field(1)
    # User id this account is associated with
    user_id: str = betterproto.string_field(2)
    # Name of account
    name: str = betterproto.string_field(3)
    # Date account was opened and approved
    created_at: datetime = betterproto.message_field(4)
    # Represents a percentage range. E.g 9.99% to 23.99% The APR corresponds to
    # the Daily Periodic Rates (DPRs): the APR is equal to the DPR multiplied by
    # 365, and the DPR is equal to the APR divided by 365. Interest charges are
    # calculated by using the DPR. We calculate interest by multiplying each
    # transaction by its applicable DPR and that result is multiplied by the
    # number of days in the billing cycle.
    annual_percentage_rate: "AnnualPercentageRates" = betterproto.message_field(5)
    # New APR if some penalty is levied
    penalty_apr: "PenaltyAPR" = betterproto.message_field(6)
    # day of each month a minimum payment is due. No interest is charged on
    # purchases if the entire account balance is paid by the due date each month.
    due_day: int = betterproto.int32_field(7)
    # Minimum amount of interest charged on account balance per month
    minimum_interest_charge: float = betterproto.double_field(8)
    # Fee paid once a year in dollars for access to credit card
    annual_account_fee: float = betterproto.double_field(9)
    # One time fee as a % of transaction charged on any foreign transaction
    foreign_transaction_fee: float = betterproto.double_field(10)
    # Temporary APR as % and its expiration date
    promotional_rate: "PromotionalRate" = betterproto.message_field(11)
    # Monthly minimum payment due on the due day
    minimum_payment_due: float = betterproto.double_field(12)
    # Current balance in dollars on the account (may not reflect pending
    # transactions)
    current_balance: float = betterproto.double_field(13)
    # Balance in dollars of all transactions that are pending
    pending_transactions: float = betterproto.double_field(14)
    # Total credit limit of the account
    credit_limit: float = betterproto.double_field(15)


@dataclass
class AnnualPercentageRates(betterproto.Message):
    low_end: float = betterproto.double_field(1)
    high_end: float = betterproto.double_field(2)


@dataclass
class PenaltyAPR(betterproto.Message):
    penalty_apr: float = betterproto.double_field(1)
    penalty_reason: "PenaltyAPRPenaltyReason" = betterproto.enum_field(2)


@dataclass
class PromotionalRate(betterproto.Message):
    temporary_apr: float = betterproto.double_field(1)
    # Date this APR expires
    expiration_date: datetime = betterproto.message_field(2)


@dataclass
class CreateAccountRequest(betterproto.Message):
    """CRUD Methods"""

    account: "Account" = betterproto.message_field(1)


@dataclass
class GetAccountRequest(betterproto.Message):
    id: str = betterproto.string_field(1)


@dataclass
class UpdateAccountRequest(betterproto.Message):
    id: str = betterproto.string_field(1)
    account: "Account" = betterproto.message_field(2)
    mask: protobuf.FieldMask = betterproto.message_field(3)


@dataclass
class DeleteAccountRequest(betterproto.Message):
    id: str = betterproto.string_field(1)


@dataclass
class ListAccountRequest(betterproto.Message):
    pass


@dataclass
class ListAccountResponse(betterproto.Message):
    accounts: List["Account"] = betterproto.message_field(1)


@dataclass
class DeleteAccountResponse(betterproto.Message):
    status: common.DELETE_STATUS = betterproto.enum_field(1)
    account: "Account" = betterproto.message_field(2)


@dataclass
class Transaction(betterproto.Message):
    """Transaction represents any credit line item in a credit card account"""

    transaction_id: str = betterproto.string_field(1)
    user_id: str = betterproto.string_field(2)
    # Account Id this transaction is associated with
    account_id: str = betterproto.string_field(3)
    # Name of the charging entity
    name: str = betterproto.string_field(4)
    # Total amount in dollars of the transaction
    amount: float = betterproto.double_field(5)
    # Date the transaction was recognized by the account
    date: datetime = betterproto.message_field(6)
    # Number of points this transaction earned the user for a specific account
    rewards_earned: int = betterproto.int32_field(7)
    transaction_details: "TransactionDetails" = betterproto.message_field(8)


@dataclass
class TransactionDetails(betterproto.Message):
    # Full address of the charging entity
    address: str = betterproto.string_field(1)
    # Business name of the charging entity
    doing_business_as: str = betterproto.string_field(2)
    # Date the transaction was processed by the charger
    date_processed: datetime = betterproto.message_field(3)


@dataclass
class CreateTransactionRequest(betterproto.Message):
    """CRUD Methods"""

    transaction: "Transaction" = betterproto.message_field(1)


@dataclass
class GetTransactionRequest(betterproto.Message):
    id: str = betterproto.string_field(1)


@dataclass
class UpdateTransactionRequest(betterproto.Message):
    id: str = betterproto.string_field(1)
    transaction: "Transaction" = betterproto.message_field(2)
    mask: protobuf.FieldMask = betterproto.message_field(3)


@dataclass
class DeleteTransactionRequest(betterproto.Message):
    id: str = betterproto.string_field(1)


@dataclass
class ListTransactionRequest(betterproto.Message):
    pass


@dataclass
class ListTransactionResponse(betterproto.Message):
    transactions: List["Transaction"] = betterproto.message_field(1)


@dataclass
class DeleteTransactionResponse(betterproto.Message):
    status: common.DELETE_STATUS = betterproto.enum_field(1)
    transaction: "Transaction" = betterproto.message_field(2)


@dataclass
class User(betterproto.Message):
    id: str = betterproto.string_field(1)
    username: str = betterproto.string_field(2)
    email: str = betterproto.string_field(3)
    password: str = betterproto.string_field(4)


@dataclass
class GetUserRequest(betterproto.Message):
    id: str = betterproto.string_field(1)


@dataclass
class UpdateUserRequest(betterproto.Message):
    id: str = betterproto.string_field(1)
    user: "User" = betterproto.message_field(2)
    mask: protobuf.FieldMask = betterproto.message_field(3)


@dataclass
class DeleteUserRequest(betterproto.Message):
    id: str = betterproto.string_field(1)


@dataclass
class ListUserRequest(betterproto.Message):
    pass


@dataclass
class ListUserResponse(betterproto.Message):
    users: List["User"] = betterproto.message_field(1)


@dataclass
class DeleteUserResponse(betterproto.Message):
    status: common.DELETE_STATUS = betterproto.enum_field(1)
    user: "User" = betterproto.message_field(2)


@dataclass
class GetPaymentPlanRequest(betterproto.Message):
    payment_tasks_ids: List[str] = betterproto.string_field(1)


@dataclass
class GetPaymentPlanResponse(betterproto.Message):
    payment_plans: List[planning.PaymentPlan] = betterproto.message_field(1)


class CoreStub(betterproto.ServiceStub):
    async def get_payment_plan(
        self, *, payment_tasks_ids: List[str] = []
    ) -> GetPaymentPlanResponse:
        """
        GetPaymentPlan makes request to the Planning service by passing it a
        list of PaymentTasks and expects to receive a list of PaymentPlans
        """

        request = GetPaymentPlanRequest()
        request.payment_tasks_ids = payment_tasks_ids

        return await self._unary_unary(
            "/core.Core/GetPaymentPlan",
            request,
            GetPaymentPlanResponse,
        )

    async def create_account(self, *, account: Optional["Account"] = None) -> Account:
        """CRUD METHODS Account"""

        request = CreateAccountRequest()
        if account is not None:
            request.account = account

        return await self._unary_unary(
            "/core.Core/CreateAccount",
            request,
            Account,
        )

    async def get_account(self, *, id: str = "") -> Account:
        request = GetAccountRequest()
        request.id = id

        return await self._unary_unary(
            "/core.Core/GetAccount",
            request,
            Account,
        )

    async def list_accounts(self) -> ListAccountResponse:
        request = ListAccountRequest()

        return await self._unary_unary(
            "/core.Core/ListAccounts",
            request,
            ListAccountResponse,
        )

    async def update_account(
        self,
        *,
        id: str = "",
        account: Optional["Account"] = None,
        mask: Optional[protobuf.FieldMask] = None,
    ) -> Account:
        request = UpdateAccountRequest()
        request.id = id
        if account is not None:
            request.account = account
        if mask is not None:
            request.mask = mask

        return await self._unary_unary(
            "/core.Core/UpdateAccount",
            request,
            Account,
        )

    async def delete_account(self, *, id: str = "") -> DeleteAccountResponse:
        request = DeleteAccountRequest()
        request.id = id

        return await self._unary_unary(
            "/core.Core/DeleteAccount",
            request,
            DeleteAccountResponse,
        )

    async def create_transaction(
        self, *, transaction: Optional["Transaction"] = None
    ) -> Transaction:
        """Transaction"""

        request = CreateTransactionRequest()
        if transaction is not None:
            request.transaction = transaction

        return await self._unary_unary(
            "/core.Core/CreateTransaction",
            request,
            Transaction,
        )

    async def get_transaction(self, *, id: str = "") -> Transaction:
        request = GetTransactionRequest()
        request.id = id

        return await self._unary_unary(
            "/core.Core/GetTransaction",
            request,
            Transaction,
        )

    async def list_transactions(self) -> ListTransactionResponse:
        request = ListTransactionRequest()

        return await self._unary_unary(
            "/core.Core/ListTransactions",
            request,
            ListTransactionResponse,
        )

    async def update_transaction(
        self,
        *,
        id: str = "",
        transaction: Optional["Transaction"] = None,
        mask: Optional[protobuf.FieldMask] = None,
    ) -> Transaction:
        request = UpdateTransactionRequest()
        request.id = id
        if transaction is not None:
            request.transaction = transaction
        if mask is not None:
            request.mask = mask

        return await self._unary_unary(
            "/core.Core/UpdateTransaction",
            request,
            Transaction,
        )

    async def delete_transaction(self, *, id: str = "") -> DeleteTransactionResponse:
        request = DeleteTransactionRequest()
        request.id = id

        return await self._unary_unary(
            "/core.Core/DeleteTransaction",
            request,
            DeleteTransactionResponse,
        )

    async def create_payment_task(self) -> common.PaymentTask:
        """Payment Task"""

        request = common.CreatePaymentTaskRequest()

        return await self._unary_unary(
            "/core.Core/CreatePaymentTask",
            request,
            common.PaymentTask,
        )

    async def create_many_payment_task(self) -> common.CreateManyPaymentTaskResponse:
        request = common.CreateManyPaymentTaskRequest()

        return await self._unary_unary(
            "/core.Core/CreateManyPaymentTask",
            request,
            common.CreateManyPaymentTaskResponse,
        )

    async def get_payment_task(self) -> common.PaymentTask:
        request = common.GetPaymentTaskRequest()

        return await self._unary_unary(
            "/core.Core/GetPaymentTask",
            request,
            common.PaymentTask,
        )

    async def list_payment_tasks(self) -> common.ListPaymentTaskResponse:
        request = common.ListPaymentTaskRequest()

        return await self._unary_unary(
            "/core.Core/ListPaymentTasks",
            request,
            common.ListPaymentTaskResponse,
        )

    async def update_payment_task(self) -> common.PaymentTask:
        request = common.UpdatePaymentTaskRequest()

        return await self._unary_unary(
            "/core.Core/UpdatePaymentTask",
            request,
            common.PaymentTask,
        )

    async def delete_payment_task(self) -> common.DeletePaymentTaskResponse:
        request = common.DeletePaymentTaskRequest()

        return await self._unary_unary(
            "/core.Core/DeletePaymentTask",
            request,
            common.DeletePaymentTaskResponse,
        )

    async def get_user(self, *, id: str = "") -> User:
        """Users"""

        request = GetUserRequest()
        request.id = id

        return await self._unary_unary(
            "/core.Core/GetUser",
            request,
            User,
        )

    async def list_users(self) -> ListUserResponse:
        request = ListUserRequest()

        return await self._unary_unary(
            "/core.Core/ListUsers",
            request,
            ListUserResponse,
        )

    async def update_user(
        self,
        *,
        id: str = "",
        user: Optional["User"] = None,
        mask: Optional[protobuf.FieldMask] = None,
    ) -> User:
        request = UpdateUserRequest()
        request.id = id
        if user is not None:
            request.user = user
        if mask is not None:
            request.mask = mask

        return await self._unary_unary(
            "/core.Core/UpdateUser",
            request,
            User,
        )

    async def delete_user(self, *, id: str = "") -> DeleteUserResponse:
        request = DeleteUserRequest()
        request.id = id

        return await self._unary_unary(
            "/core.Core/DeleteUser",
            request,
            DeleteUserResponse,
        )
