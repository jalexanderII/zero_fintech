# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: core/accounts.proto, core/payment_task.proto, core/transactions.proto, core/users.proto, core/core.proto
# plugin: python-betterproto
from dataclasses import dataclass
from datetime import datetime
from typing import List

import betterproto


class PenaltyAPRPenaltyReason(betterproto.Enum):
    PENALTY_REASON_UNKNOWN = 0
    PENALTY_REASON_LATE_PAYMENT = 1


@dataclass
class Account(betterproto.Message):
    """
    Account balances we be calculated using the â€œaverage daily balance
    (including new Purchases)" method.
    """

    account_id: str = betterproto.string_field(1)
    # User id this account is associated with
    user_id: str = betterproto.string_field(2)
    # Name of account
    name: str = betterproto.string_field(3)
    # Date account was opened and approved
    created_at: datetime = betterproto.message_field(4)
    # Represents a percentage range. E.g 9.99% to 23.99% The APR corresponds to
    # the Daily Periodic Rates (DPRs): the APR is equal to the DPR multiplied by
    # 365, and the DPR is equal to the APR divided by 365. Interest charges are
    # calculated by using the DPR. We calculate interest by multiplying each
    # transaction by its applicable DPR and that result is multiplied by the
    # number of days in the billing cycle.
    annual_percentage_rate: "AnnualPercentageRates" = betterproto.message_field(5)
    # New APR if some penalty is levied
    penalty_apr: "PenaltyAPR" = betterproto.message_field(6)
    # day of each month a minimum payment is due. No interest is charged on
    # purchases if the entire account balance is paid by the due date each month.
    due_day: int = betterproto.int32_field(7)
    # Minimum amount of interest charged on account balance per month
    minimum_interest_charge: float = betterproto.double_field(8)
    # Fee paid once a year in dollars for access to credit card
    annual_account_fee: float = betterproto.double_field(9)
    # One time fee as a % of transaction charged on any foreign transaction
    foreign_transaction_fee: float = betterproto.double_field(10)
    # Temporary APR as % and its expiration date
    promotional_rate: "PromotionalRate" = betterproto.message_field(11)
    # Monthly minimum payment due on the due day
    minimum_payment_due: float = betterproto.double_field(12)
    # Current balance in dollars on the account (may not reflect pending
    # transactions)
    current_balance: float = betterproto.double_field(13)
    # Balance in dollars of all transactions that are pending
    pending_transactions: float = betterproto.double_field(14)
    # Total credit limit of the account
    credit_limit: float = betterproto.double_field(15)


@dataclass
class AnnualPercentageRates(betterproto.Message):
    low_end: float = betterproto.double_field(1)
    high_end: float = betterproto.double_field(2)


@dataclass
class PenaltyAPR(betterproto.Message):
    penalty_apr: float = betterproto.double_field(1)
    penalty_reason: "PenaltyAPRPenaltyReason" = betterproto.enum_field(2)


@dataclass
class PromotionalRate(betterproto.Message):
    temporary_apr: float = betterproto.double_field(1)
    # Date this APR expires
    expiration_date: datetime = betterproto.message_field(2)


@dataclass
class Transaction(betterproto.Message):
    """Transaction represents any credit line item in a credit card account"""

    transaction_id: str = betterproto.string_field(1)
    user_id: str = betterproto.string_field(2)
    # Account Id this transaction is associated with
    account_id: str = betterproto.string_field(3)
    # Name of the charging entity
    name: str = betterproto.string_field(4)
    # Total amount in dollars of the transaction
    amount: float = betterproto.double_field(5)
    # Date the transaction was recognized by the account
    date: datetime = betterproto.message_field(6)
    # Number of points this transaction earned the user for a specific account
    rewards_earned: int = betterproto.int32_field(7)
    transaction_details: "TransactionDetails" = betterproto.message_field(8)


@dataclass
class TransactionDetails(betterproto.Message):
    # Full address of the charging entity
    address: str = betterproto.string_field(1)
    # Business name of the charging entity
    doing_business_as: str = betterproto.string_field(2)
    # Date the transaction was processed by the charger
    date_processed: datetime = betterproto.message_field(3)


@dataclass
class User(betterproto.Message):
    id: str = betterproto.string_field(1)
    username: str = betterproto.string_field(2)
    email: str = betterproto.string_field(3)
    password: str = betterproto.string_field(4)


@dataclass
class AccountInfo(betterproto.Message):
    transaction_ids: List[str] = betterproto.string_field(1)
    account_id: str = betterproto.string_field(2)
    amount: float = betterproto.double_field(3)
