# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: planning/planning.proto
# plugin: python-betterproto
from dataclasses import dataclass
from datetime import datetime
from typing import Dict, List, Optional

import betterproto
import grpclib

from . import common


@dataclass
class GetUpcomingPaymentActionsUserRequest(betterproto.Message):
    user_id: str = betterproto.string_field(1)
    date: datetime = betterproto.message_field(2)


@dataclass
class GetUpcomingPaymentActionsUserResponse(betterproto.Message):
    payment_actions: List[common.PaymentAction] = betterproto.message_field(1)


@dataclass
class GetAllUpcomingPaymentActionsRequest(betterproto.Message):
    date: datetime = betterproto.message_field(1)


@dataclass
class GetAllUpcomingPaymentActionsResponse(betterproto.Message):
    user_ids: List[str] = betterproto.string_field(1)
    payment_actions: List[common.PaymentAction] = betterproto.message_field(2)


@dataclass
class CreatePaymentPlanRequest(betterproto.Message):
    payment_tasks: List[common.PaymentTask] = betterproto.message_field(1)
    meta_data: common.MetaData = betterproto.message_field(2)
    # indicates whether to save PaymentPlan in database
    save_plan: bool = betterproto.bool_field(3)


@dataclass
class GetUserOverviewRequest(betterproto.Message):
    user_id: str = betterproto.string_field(1)


@dataclass
class WaterfallMonth(betterproto.Message):
    account_to_amounts: Dict[str, float] = betterproto.map_field(
        1, betterproto.TYPE_STRING, betterproto.TYPE_DOUBLE
    )


@dataclass
class WaterfallOverviewResponse(betterproto.Message):
    monthly_waterfall: List["WaterfallMonth"] = betterproto.message_field(1)


@dataclass
class GetAmountPaidPercentageResponse(betterproto.Message):
    percentage_paid: float = betterproto.double_field(1)


@dataclass
class GetPercentageCoveredByPlansResponse(betterproto.Message):
    overall_covered: float = betterproto.double_field(1)
    account_to_percent_covered: Dict[str, float] = betterproto.map_field(
        2, betterproto.TYPE_STRING, betterproto.TYPE_DOUBLE
    )


class PlanningStub(betterproto.ServiceStub):
    async def create_payment_plan(
        self,
        *,
        payment_tasks: List[common.PaymentTask] = [],
        meta_data: Optional[common.MetaData] = None,
        save_plan: bool = False,
    ) -> common.PaymentPlanResponse:
        """
        CreatePaymentPlan accepts a request from Core service with PaymentTasks
        to create a PaymentPlan for
        """

        request = CreatePaymentPlanRequest()
        if payment_tasks is not None:
            request.payment_tasks = payment_tasks
        if meta_data is not None:
            request.meta_data = meta_data
        request.save_plan = save_plan

        return await self._unary_unary(
            "/planning.Planning/CreatePaymentPlan",
            request,
            common.PaymentPlanResponse,
        )

    async def get_waterfall_overview(
        self, *, user_id: str = ""
    ) -> WaterfallOverviewResponse:
        """
        GetWaterfallOverview accepts a request from Core service with a user ID
        to create a waterfall overview for the coming 12 month
        """

        request = GetUserOverviewRequest()
        request.user_id = user_id

        return await self._unary_unary(
            "/planning.Planning/GetWaterfallOverview",
            request,
            WaterfallOverviewResponse,
        )

    async def get_amount_paid_percentage(
        self, *, user_id: str = ""
    ) -> GetAmountPaidPercentageResponse:
        """
        Get the percentage of amount which has been paid of all active
        PaymentPlans for a given user ID
        """

        request = GetUserOverviewRequest()
        request.user_id = user_id

        return await self._unary_unary(
            "/planning.Planning/GetAmountPaidPercentage",
            request,
            GetAmountPaidPercentageResponse,
        )

    async def get_percentage_covered_by_plans(
        self, *, user_id: str = ""
    ) -> GetPercentageCoveredByPlansResponse:
        """
        Get the percentage of current balance which is covered by active plans
        for a given user ID
        """

        request = GetUserOverviewRequest()
        request.user_id = user_id

        return await self._unary_unary(
            "/planning.Planning/GetPercentageCoveredByPlans",
            request,
            GetPercentageCoveredByPlansResponse,
        )

    async def get_upcoming_payment_actions_user(
        self, *, user_id: str = "", date: Optional[datetime] = None
    ) -> GetUpcomingPaymentActionsUserResponse:
        """
        Get pending payment actions which are at given date or the day
        thereafter for user; if no date is given, today is used
        """

        request = GetUpcomingPaymentActionsUserRequest()
        request.user_id = user_id
        if date is not None:
            request.date = date

        return await self._unary_unary(
            "/planning.Planning/GetUpcomingPaymentActionsUser",
            request,
            GetUpcomingPaymentActionsUserResponse,
        )

    async def get_all_upcoming_payment_actions(
        self, *, date: Optional[datetime] = None
    ) -> GetAllUpcomingPaymentActionsResponse:
        """
        Get pending payment actions which are at given date or the day
        thereafter for all users; if no date is given, today is used
        """

        request = GetAllUpcomingPaymentActionsRequest()
        if date is not None:
            request.date = date

        return await self._unary_unary(
            "/planning.Planning/GetAllUpcomingPaymentActions",
            request,
            GetAllUpcomingPaymentActionsResponse,
        )

    async def get_payment_plan(self) -> common.PaymentPlan:
        """CRUD METHODS"""

        request = common.GetPaymentPlanRequest()

        return await self._unary_unary(
            "/planning.Planning/GetPaymentPlan",
            request,
            common.PaymentPlan,
        )

    async def list_payment_plans(self) -> common.ListPaymentPlanResponse:
        request = common.ListPaymentPlanRequest()

        return await self._unary_unary(
            "/planning.Planning/ListPaymentPlans",
            request,
            common.ListPaymentPlanResponse,
        )

    async def list_user_payment_plans(self) -> common.ListPaymentPlanResponse:
        request = common.ListUserPaymentPlansRequest()

        return await self._unary_unary(
            "/planning.Planning/ListUserPaymentPlans",
            request,
            common.ListPaymentPlanResponse,
        )

    async def update_payment_plan(self) -> common.PaymentPlan:
        request = common.UpdatePaymentPlanRequest()

        return await self._unary_unary(
            "/planning.Planning/UpdatePaymentPlan",
            request,
            common.PaymentPlan,
        )

    async def delete_payment_plan(self) -> common.DeletePaymentPlanResponse:
        request = common.DeletePaymentPlanRequest()

        return await self._unary_unary(
            "/planning.Planning/DeletePaymentPlan",
            request,
            common.DeletePaymentPlanResponse,
        )
