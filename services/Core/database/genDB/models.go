// Code generated by sqlc. DO NOT EDIT.

package genDB

import (
	"database/sql"
	"fmt"
	"time"
)

type PaymentFrequency string

const (
	PaymentFrequencyPAYMENTFREQUNKNOWN PaymentFrequency = "PAYMENTFREQ_UNKNOWN"
	PaymentFrequencyWEEKLY             PaymentFrequency = "WEEKLY"
	PaymentFrequencyBIWEEKLY           PaymentFrequency = "BIWEEKLY"
	PaymentFrequencyMONTHLY            PaymentFrequency = "MONTHLY"
	PaymentFrequencyQUARTERLY          PaymentFrequency = "QUARTERLY"
)

func (e *PaymentFrequency) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PaymentFrequency(s)
	case string:
		*e = PaymentFrequency(s)
	default:
		return fmt.Errorf("unsupported scan type for PaymentFrequency: %T", src)
	}
	return nil
}

type PenaltyReason string

const (
	PenaltyReasonPENALTYREASONUNKNOWN PenaltyReason = "PENALTY_REASON_UNKNOWN"
	PenaltyReasonLATEPAYMENT          PenaltyReason = "LATE_PAYMENT"
)

func (e *PenaltyReason) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PenaltyReason(s)
	case string:
		*e = PenaltyReason(s)
	default:
		return fmt.Errorf("unsupported scan type for PenaltyReason: %T", src)
	}
	return nil
}

type PlanType string

const (
	PlanTypePLANTYPEUNKNOWN  PlanType = "PLANTYPE_UNKNOWN"
	PlanTypeOPTIMCREDITSCORE PlanType = "OPTIM_CREDIT_SCORE"
	PlanTypeMINFEES          PlanType = "MIN_FEES"
)

func (e *PlanType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PlanType(s)
	case string:
		*e = PlanType(s)
	default:
		return fmt.Errorf("unsupported scan type for PlanType: %T", src)
	}
	return nil
}

type Account struct {
	AccountID             int32           `json:"account_id"`
	UserID                sql.NullInt32   `json:"user_id"`
	Name                  string          `json:"name"`
	CreatedAt             time.Time       `json:"created_at"`
	AnnualPercentageRate  sql.NullString  `json:"annual_percentage_rate"`
	PenaltyApr            sql.NullString  `json:"penalty_apr"`
	DueDay                sql.NullInt32   `json:"due_day"`
	MinimumInterestCharge sql.NullFloat64 `json:"minimum_interest_charge"`
	AnnualAccountFee      sql.NullFloat64 `json:"annual_account_fee"`
	ForeignTransactionFee sql.NullFloat64 `json:"foreign_transaction_fee"`
	PromotionalRate       sql.NullString  `json:"promotional_rate"`
	MinimumPaymentDue     sql.NullFloat64 `json:"minimum_payment_due"`
	CurrentBalance        sql.NullFloat64 `json:"current_balance"`
	PendingTransactions   sql.NullFloat64 `json:"pending_transactions"`
	CreditLimit           sql.NullFloat64 `json:"credit_limit"`
}

type PaymentTask struct {
	PaymentTaskID int32          `json:"payment_task_id"`
	UserID        sql.NullInt32  `json:"user_id"`
	TransactionID int32          `json:"transaction_id"`
	AccountID     int32          `json:"account_id"`
	MetaData      sql.NullString `json:"meta_data"`
}

type Transaction struct {
	TransactionID      int32          `json:"transaction_id"`
	UserID             sql.NullInt32  `json:"user_id"`
	AccountID          int32          `json:"account_id"`
	Name               string         `json:"name"`
	Amount             float64        `json:"amount"`
	Date               sql.NullTime   `json:"date"`
	RewardsEarned      sql.NullInt32  `json:"rewards_earned"`
	TransactionDetails sql.NullString `json:"transaction_details"`
}
