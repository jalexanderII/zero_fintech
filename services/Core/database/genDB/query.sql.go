// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package genDB

import (
	"context"
	"database/sql"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (user_id,
                      name,
                      annual_percentage_rate,
                      penalty_apr,
                      due_day,
                      minimum_interest_charge,
                      annual_account_fee,
                      foreign_transaction_fee,
                      promotional_rate,
                      minimum_payment_due,
                      current_balance,
                      pending_transactions,
                      credit_limit)
VALUES ($1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7,
        $8,
        $9,
        $10,
        $11,
        $12,
        $13) RETURNING account_id, user_id, name, created_at, annual_percentage_rate, penalty_apr, due_day, minimum_interest_charge, annual_account_fee, foreign_transaction_fee, promotional_rate, minimum_payment_due, current_balance, pending_transactions, credit_limit
`

type CreateAccountParams struct {
	UserID                sql.NullInt32   `json:"user_id"`
	Name                  string          `json:"name"`
	AnnualPercentageRate  sql.NullString  `json:"annual_percentage_rate"`
	PenaltyApr            sql.NullString  `json:"penalty_apr"`
	DueDay                sql.NullInt32   `json:"due_day"`
	MinimumInterestCharge sql.NullFloat64 `json:"minimum_interest_charge"`
	AnnualAccountFee      sql.NullFloat64 `json:"annual_account_fee"`
	ForeignTransactionFee sql.NullFloat64 `json:"foreign_transaction_fee"`
	PromotionalRate       sql.NullString  `json:"promotional_rate"`
	MinimumPaymentDue     sql.NullFloat64 `json:"minimum_payment_due"`
	CurrentBalance        sql.NullFloat64 `json:"current_balance"`
	PendingTransactions   sql.NullFloat64 `json:"pending_transactions"`
	CreditLimit           sql.NullFloat64 `json:"credit_limit"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, createAccount,
		arg.UserID,
		arg.Name,
		arg.AnnualPercentageRate,
		arg.PenaltyApr,
		arg.DueDay,
		arg.MinimumInterestCharge,
		arg.AnnualAccountFee,
		arg.ForeignTransactionFee,
		arg.PromotionalRate,
		arg.MinimumPaymentDue,
		arg.CurrentBalance,
		arg.PendingTransactions,
		arg.CreditLimit,
	)
	var i Account
	err := row.Scan(
		&i.AccountID,
		&i.UserID,
		&i.Name,
		&i.CreatedAt,
		&i.AnnualPercentageRate,
		&i.PenaltyApr,
		&i.DueDay,
		&i.MinimumInterestCharge,
		&i.AnnualAccountFee,
		&i.ForeignTransactionFee,
		&i.PromotionalRate,
		&i.MinimumPaymentDue,
		&i.CurrentBalance,
		&i.PendingTransactions,
		&i.CreditLimit,
	)
	return i, err
}

const createPaymentTask = `-- name: CreatePaymentTask :one
INSERT INTO payment_task (user_id,
                          transaction_id,
                          account_id,
                          meta_data)
VALUES ($1,
        $2,
        $3,
        $4) RETURNING payment_task_id, user_id, transaction_id, account_id, meta_data
`

type CreatePaymentTaskParams struct {
	UserID        sql.NullInt32  `json:"user_id"`
	TransactionID int32          `json:"transaction_id"`
	AccountID     int32          `json:"account_id"`
	MetaData      sql.NullString `json:"meta_data"`
}

func (q *Queries) CreatePaymentTask(ctx context.Context, arg CreatePaymentTaskParams) (PaymentTask, error) {
	row := q.db.QueryRowContext(ctx, createPaymentTask,
		arg.UserID,
		arg.TransactionID,
		arg.AccountID,
		arg.MetaData,
	)
	var i PaymentTask
	err := row.Scan(
		&i.PaymentTaskID,
		&i.UserID,
		&i.TransactionID,
		&i.AccountID,
		&i.MetaData,
	)
	return i, err
}

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO transactions (user_id,
                          account_id,
                          name,
                          amount,
                          date,
                          rewards_earned,
                          transaction_details)
VALUES ($1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7) RETURNING transaction_id, user_id, account_id, name, amount, date, rewards_earned, transaction_details
`

type CreateTransactionParams struct {
	UserID             sql.NullInt32  `json:"user_id"`
	AccountID          int32          `json:"account_id"`
	Name               string         `json:"name"`
	Amount             float64        `json:"amount"`
	Date               sql.NullTime   `json:"date"`
	RewardsEarned      sql.NullInt32  `json:"rewards_earned"`
	TransactionDetails sql.NullString `json:"transaction_details"`
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, createTransaction,
		arg.UserID,
		arg.AccountID,
		arg.Name,
		arg.Amount,
		arg.Date,
		arg.RewardsEarned,
		arg.TransactionDetails,
	)
	var i Transaction
	err := row.Scan(
		&i.TransactionID,
		&i.UserID,
		&i.AccountID,
		&i.Name,
		&i.Amount,
		&i.Date,
		&i.RewardsEarned,
		&i.TransactionDetails,
	)
	return i, err
}
