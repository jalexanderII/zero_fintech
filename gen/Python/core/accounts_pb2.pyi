"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class Account(google.protobuf.message.Message):
    """Account balances we be calculated using the “average daily balance (including new Purchases)" method."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ACCOUNT_ID_FIELD_NUMBER: builtins.int
    USER_ID_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    OFFICIAL_NAME_FIELD_NUMBER: builtins.int
    TYPE_FIELD_NUMBER: builtins.int
    SUBTYPE_FIELD_NUMBER: builtins.int
    AVAILABLE_BALANCE_FIELD_NUMBER: builtins.int
    CURRENT_BALANCE_FIELD_NUMBER: builtins.int
    CREDIT_LIMIT_FIELD_NUMBER: builtins.int
    ISO_CURRENCY_CODE_FIELD_NUMBER: builtins.int
    ANNUAL_PERCENTAGE_RATE_FIELD_NUMBER: builtins.int
    IS_OVERDUE_FIELD_NUMBER: builtins.int
    LAST_PAYMENT_AMOUNT_FIELD_NUMBER: builtins.int
    LAST_STATEMENT_ISSUE_DATE_FIELD_NUMBER: builtins.int
    LAST_STATEMENT_BALANCE_FIELD_NUMBER: builtins.int
    MINIMUM_PAYMENT_AMOUNT_FIELD_NUMBER: builtins.int
    NEXT_PAYMENT_DUE_DATE_FIELD_NUMBER: builtins.int
    PLAID_ACCOUNT_ID_FIELD_NUMBER: builtins.int
    account_id: typing.Text = ...
    """DB unique id"""

    user_id: typing.Text = ...
    """User id this account is associated with"""

    name: typing.Text = ...
    """The name of the account, either assigned by the user or by the financial institution itself"""

    official_name: typing.Text = ...
    """The official name of the account as given by the financial institution"""

    type: typing.Text = ...
    subtype: typing.Text = ...
    available_balance: builtins.float = ...
    """The amount of funds available to be withdrawn from the account, as determined by the financial institution.
    For `credit`-type accounts, the `available` balance typically equals the `limit` less the `current` balance,
    less any pending outflows plus any pending inflows.
    """

    current_balance: builtins.float = ...
    """The total amount of funds in or owed by the account.  For `credit`-type accounts, a positive balance
    indicates the amount owed; a negative amount indicates the lender owing the account holder.
    """

    credit_limit: builtins.float = ...
    """For `credit`-type accounts, this represents the credit limit."""

    iso_currency_code: typing.Text = ...
    """The ISO-4217 currency code of the balance. Always null if `unofficial_currency_code` is non-null."""

    @property
    def annual_percentage_rate(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___AnnualPercentageRates]:
        """The various interest rates that apply to the account."""
        pass
    is_overdue: builtins.bool = ...
    """true if a payment is currently overdue."""

    last_payment_amount: builtins.float = ...
    """The amount of the last payment."""

    last_statement_issue_date: typing.Text = ...
    """The date of the last statement.
    Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
    """

    last_statement_balance: builtins.float = ...
    """The total amount owed as of the last statement issued"""

    minimum_payment_amount: builtins.float = ...
    """The minimum payment due for the next billing cycle."""

    next_payment_due_date: typing.Text = ...
    """The due date for the next payment. The due date is `null` if a payment is not expected.
    Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
    """

    plaid_account_id: typing.Text = ...
    """Plaid’s unique identifier for the account. This value will not change unless Plaid can't reconcile the account
    with the data returned by the financial institution. This may occur, for example, when the name of the account
    changes. If this happens a new `account_id` will be assigned to the account.  The `account_id` can also change
    if the `access_token` is deleted and the same credentials that were used to generate that `access_token` are used
    to generate a new `access_token` on a later date. In that case, the new `account_id` will be different from the
    old `account_id`.  If an account with a specific `account_id` disappears instead of changing, the account is
    likely closed. Closed accounts are not returned by the Plaid API.  Like all Plaid identifiers, the `account_id`
    is case sensitive.
    """

    def __init__(self,
        *,
        account_id : typing.Text = ...,
        user_id : typing.Text = ...,
        name : typing.Text = ...,
        official_name : typing.Text = ...,
        type : typing.Text = ...,
        subtype : typing.Text = ...,
        available_balance : builtins.float = ...,
        current_balance : builtins.float = ...,
        credit_limit : builtins.float = ...,
        iso_currency_code : typing.Text = ...,
        annual_percentage_rate : typing.Optional[typing.Iterable[global___AnnualPercentageRates]] = ...,
        is_overdue : builtins.bool = ...,
        last_payment_amount : builtins.float = ...,
        last_statement_issue_date : typing.Text = ...,
        last_statement_balance : builtins.float = ...,
        minimum_payment_amount : builtins.float = ...,
        next_payment_due_date : typing.Text = ...,
        plaid_account_id : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["account_id",b"account_id","annual_percentage_rate",b"annual_percentage_rate","available_balance",b"available_balance","credit_limit",b"credit_limit","current_balance",b"current_balance","is_overdue",b"is_overdue","iso_currency_code",b"iso_currency_code","last_payment_amount",b"last_payment_amount","last_statement_balance",b"last_statement_balance","last_statement_issue_date",b"last_statement_issue_date","minimum_payment_amount",b"minimum_payment_amount","name",b"name","next_payment_due_date",b"next_payment_due_date","official_name",b"official_name","plaid_account_id",b"plaid_account_id","subtype",b"subtype","type",b"type","user_id",b"user_id"]) -> None: ...
global___Account = Account

class AnnualPercentageRates(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    APR_PERCENTAGE_FIELD_NUMBER: builtins.int
    APR_TYPE_FIELD_NUMBER: builtins.int
    BALANCE_SUBJECT_TO_APR_FIELD_NUMBER: builtins.int
    INTEREST_CHARGE_AMOUNT_FIELD_NUMBER: builtins.int
    apr_percentage: builtins.float = ...
    apr_type: typing.Text = ...
    balance_subject_to_apr: builtins.float = ...
    interest_charge_amount: builtins.float = ...
    def __init__(self,
        *,
        apr_percentage : builtins.float = ...,
        apr_type : typing.Text = ...,
        balance_subject_to_apr : builtins.float = ...,
        interest_charge_amount : builtins.float = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["apr_percentage",b"apr_percentage","apr_type",b"apr_type","balance_subject_to_apr",b"balance_subject_to_apr","interest_charge_amount",b"interest_charge_amount"]) -> None: ...
global___AnnualPercentageRates = AnnualPercentageRates

class CreateAccountRequest(google.protobuf.message.Message):
    """CRUD Methods"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ACCOUNT_FIELD_NUMBER: builtins.int
    @property
    def account(self) -> global___Account: ...
    def __init__(self,
        *,
        account : typing.Optional[global___Account] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["account",b"account"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["account",b"account"]) -> None: ...
global___CreateAccountRequest = CreateAccountRequest

class GetAccountRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ID_FIELD_NUMBER: builtins.int
    id: typing.Text = ...
    def __init__(self,
        *,
        id : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["id",b"id"]) -> None: ...
global___GetAccountRequest = GetAccountRequest

class ListAccountRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    def __init__(self,
        ) -> None: ...
global___ListAccountRequest = ListAccountRequest

class ListUserAccountsRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    USER_ID_FIELD_NUMBER: builtins.int
    user_id: typing.Text = ...
    def __init__(self,
        *,
        user_id : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["user_id",b"user_id"]) -> None: ...
global___ListUserAccountsRequest = ListUserAccountsRequest

class ListAccountResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ACCOUNTS_FIELD_NUMBER: builtins.int
    @property
    def accounts(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Account]: ...
    def __init__(self,
        *,
        accounts : typing.Optional[typing.Iterable[global___Account]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["accounts",b"accounts"]) -> None: ...
global___ListAccountResponse = ListAccountResponse
